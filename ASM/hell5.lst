     1                                  %include "stud_io.inc"
     2                              <1> ;; File stud_io.inc for Linux O.S.
     3                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009.
     4                              <1> ;; I, the author, hereby grant everyone the right to use this
     5                              <1> ;; file for any purpose, in any manner, in it's original or
     6                              <1> ;; modified form, provided that any modified versions are
     7                              <1> ;; clearly marked as such.
     8                              <1> 
     9                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    10                              <1> ;; system dependend part
    11                              <1> 
    12                              <1> ; generic 3-param syscall
    13                              <1> %macro _syscall_3 4
    14                              <1> 	push edx
    15                              <1> 	push ecx
    16                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    17                              <1> 	push %1
    18                              <1> 	push %2
    19                              <1> 	push %3
    20                              <1> 	push %4
    21                              <1> 	pop edx
    22                              <1> 	pop ecx
    23                              <1> 	pop ebx
    24                              <1> 	pop eax
    25                              <1> 	int 0x80
    26                              <1> 	pop ebx
    27                              <1> 	pop ecx
    28                              <1> 	pop edx
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    32                              <1> %macro _syscall_exit 1
    33                              <1> 	mov ebx, %1	; exit code
    34                              <1> 	mov eax, 1	; 1 = sys_exit
    35                              <1> 	int 0x80
    36                              <1> %endmacro
    37                              <1> 
    38                              <1> ;; system dependent part ends here
    39                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    40                              <1> 
    41                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length
    42                              <1> ; output: eax: read bytes
    43                              <1> %macro _syscall_read 3
    44                              <1> 	_syscall_3 3,%1,%2,%3
    45                              <1> %endmacro
    46                              <1> 
    47                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length
    48                              <1> ; output: eax: written bytes
    49                              <1> %macro _syscall_write 3
    50                              <1> 	_syscall_3 4,%1,%2,%3
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    54                              <1> %macro 	PRINT 1
    55                              <1> 	pusha
    56                              <1> 	pushf
    57                              <1> 	jmp %%astr
    58                              <1> %%str	db	%1, 0
    59                              <1> %%strln	equ	$-%%str
    60                              <1> %%astr:	_syscall_write 1, %%str, %%strln
    61                              <1> 	popf
    62                              <1> 	popa
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    66                              <1> %macro	PUTCHAR 1
    67                              <1> 	pusha
    68                              <1> 	pushf
    69                              <1> %ifstr %1
    70                              <1> 	mov	al, %1
    71                              <1> %elifnum %1
    72                              <1> 	mov	al, %1
    73                              <1> %elifidni %1,al
    74                              <1> 	nop
    75                              <1> %elifidni %1,ah
    76                              <1> 	mov	al, ah
    77                              <1> %elifidni %1,bl
    78                              <1> 	mov	al, bl
    79                              <1> %elifidni %1,bh
    80                              <1> 	mov	al, bh
    81                              <1> %elifidni %1,cl
    82                              <1> 	mov	al, cl
    83                              <1> %elifidni %1,ch
    84                              <1> 	mov	al, ch
    85                              <1> %elifidni %1,dl
    86                              <1> 	mov	al, dl
    87                              <1> %elifidni %1,dh
    88                              <1> 	mov	al, dh
    89                              <1> %else
    90                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
    91                              <1> %endif
    92                              <1> 	sub	esp, 2  ; reserve memory for buffer
    93                              <1> 	mov	edi, esp
    94                              <1> 	mov	[edi], al
    95                              <1> 	_syscall_write 1, edi, 1
    96                              <1> 	add	esp, 2
    97                              <1> 	popf
    98                              <1> 	popa
    99                              <1> %endmacro
   100                              <1> 
   101                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   102                              <1> %macro	GETCHAR 0
   103                              <1> 	pushf
   104                              <1> 	push	edi
   105                              <1> 	sub	esp, 2
   106                              <1> 	mov	edi, esp
   107                              <1> 	_syscall_read 0, edi, 1
   108                              <1> 	cmp	eax, 1
   109                              <1> 	jne	%%eof_reached
   110                              <1> 	xor	eax,eax
   111                              <1> 	mov	al, [edi]
   112                              <1> 	jmp	%%gcquit
   113                              <1> %%eof_reached:
   114                              <1> 	xor	eax, eax
   115                              <1> 	not	eax 		; eax := -1
   116                              <1> %%gcquit:
   117                              <1> 	add	esp, 2
   118                              <1> 	pop	edi
   119                              <1> 	popf
   120                              <1> %endmacro
   121                              <1> 
   122                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   123                              <1> %macro FINISH 0-1 0
   124                              <1> 	_syscall_exit %1
   125                              <1> %endmacro
     2                                  global _start
     3                                  
     4                                  section .text
     5 00000000 B800000000              _start: mov eax, 0
     6                                  again: PRINT "Hello"
     6                              <1> again: 
    55 00000005 60                  <1>  pusha
    56 00000006 9C                  <1>  pushf
    57 00000007 EB06                <1>  jmp %%astr
    58 00000009 48656C6C6F00        <1> %%str db %1, 0
    59                              <1> %%strln equ $-%%str
    60                              <1> %%astr: _syscall_write 1, %%str, %%strln
    60                              <2> ..@2.astr: 
    50                              <2>  _syscall_3 4,%1,%2,%3
    14 0000000F 52                  <3>  push edx
    15 00000010 51                  <3>  push ecx
    16 00000011 53                  <3>  push ebx
    17 00000012 6A04                <3>  push %1
    18 00000014 6A01                <3>  push %2
    19 00000016 68[09000000]        <3>  push %3
    20 0000001B 6A06                <3>  push %4
    21 0000001D 5A                  <3>  pop edx
    22 0000001E 59                  <3>  pop ecx
    23 0000001F 5B                  <3>  pop ebx
    24 00000020 58                  <3>  pop eax
    25 00000021 CD80                <3>  int 0x80
    26 00000023 5B                  <3>  pop ebx
    27 00000024 59                  <3>  pop ecx
    28 00000025 5A                  <3>  pop edx
    61 00000026 9D                  <1>  popf
    62 00000027 61                  <1>  popa
     7                                          ;PRINT welwsg
     8                                          PUTCHAR 10
    67 00000028 60                  <1>  pusha
    68 00000029 9C                  <1>  pushf
    69                              <1> %ifstr %1
    70                              <1>  mov al, %1
    71                              <1> %elifnum %1
    72 0000002A B00A                <1>  mov al, %1
    73                              <1> %elifidni %1,al
    74                              <1>  nop
    75                              <1> %elifidni %1,ah
    76                              <1>  mov al, ah
    77                              <1> %elifidni %1,bl
    78                              <1>  mov al, bl
    79                              <1> %elifidni %1,bh
    80                              <1>  mov al, bh
    81                              <1> %elifidni %1,cl
    82                              <1>  mov al, cl
    83                              <1> %elifidni %1,ch
    84                              <1>  mov al, ch
    85                              <1> %elifidni %1,dl
    86                              <1>  mov al, dl
    87                              <1> %elifidni %1,dh
    88                              <1>  mov al, dh
    89                              <1> %else
    90                              <1>  mov al, %1
    91                              <1> %endif
    92 0000002C 83EC02              <1>  sub esp, 2
    93 0000002F 89E7                <1>  mov edi, esp
    94 00000031 8807                <1>  mov [edi], al
    95                              <1>  _syscall_write 1, edi, 1
    50                              <2>  _syscall_3 4,%1,%2,%3
    14 00000033 52                  <3>  push edx
    15 00000034 51                  <3>  push ecx
    16 00000035 53                  <3>  push ebx
    17 00000036 6A04                <3>  push %1
    18 00000038 6A01                <3>  push %2
    19 0000003A 57                  <3>  push %3
    20 0000003B 6A01                <3>  push %4
    21 0000003D 5A                  <3>  pop edx
    22 0000003E 59                  <3>  pop ecx
    23 0000003F 5B                  <3>  pop ebx
    24 00000040 58                  <3>  pop eax
    25 00000041 CD80                <3>  int 0x80
    26 00000043 5B                  <3>  pop ebx
    27 00000044 59                  <3>  pop ecx
    28 00000045 5A                  <3>  pop edx
    96 00000046 83C402              <1>  add esp, 2
    97 00000049 9D                  <1>  popf
    98 0000004A 61                  <1>  popa
     9 0000004B 40                              inc eax
    10 0000004C 83F805                          cmp eax, 5
    11 0000004F 7CB4                            jl again
    12                                          FINISH
   124                              <1>  _syscall_exit %1
    33 00000051 BB00000000          <2>  mov ebx, %1
    34 00000056 B801000000          <2>  mov eax, 1
    35 0000005B CD80                <2>  int 0x80
    13                                  
    14                                  section .bss
    15                                  ;_start2: mov eax, 0
    16 00000000 <res 10h>               welwsg resb 16
    17 00000010 <res 10h>               welwsg2 resb 16
    18 00000020 <res 3E80h>             welwsg3 resb 16000
